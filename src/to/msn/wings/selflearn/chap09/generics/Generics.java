package to.msn.wings.selflearn.chap09.generics;

public class Generics {

	public static void main(String[] args) {
		

	}

}

/*
汎用的な（＝任意の型を受け付ける）クラス/メソッドに対して、
特定の型を割り当ててその型専用のクラスを生成する機能を「ジェネリクス（Generics）」という。
○ジェネリック型（ジェネリクスを利用した型）
[修飾子] class クラス名<型パラメーター, ...> {
  ...クラス本体...
}
ジェネリック型ではまず、特定の型を受け取るための「型パラメーター（Type Parameter）」を宣言する。
ジェネリック型では、この型パラメーターを介して、インスタンス化に際してひもづけるべき型を受け取っている。
型パラメーターの名前は、識別子のルールの範囲で自由に決められる。ただし、慣用的には
T（Type）、E（Element）、K（Key）、V（Value）のような大文字アルファベット1文字をよく利用する。
型パラメーターの中で宣言された型のことを「変数型（Type variable）」という。
変数型はジェネリック型配下のメンバー定義の中で型を表すために利用できる。具体的には以下の箇所である。
・インスタンスメンバーの引数/戻り値型
・ローカル変数の型
・ネストした型
つまり、メンバークラスの型としては利用できない。
ジェネリックの目的はあくまでメンバー要素の型をコンパイル時に保障することである。
よって、実行時には不要になる型情報をコンパイル時にObject型に変換することで除去している。
このようなジェネリクスの性質を「イレイジャ（Erasure）」という。
また、ジェネリック型を扱う中でよくでてくる用語を以下にまとめる。
・実型パラメーター（または型引数）・・・ジェネリック型をインスタンス化する際に<...>で指定する具体的な型
・パラメーター化された型・・・型引数によって、特定の型が割り当てられたジェネリック型
・原型・・・型引数を指定せずにインスタンス化できる
*/
