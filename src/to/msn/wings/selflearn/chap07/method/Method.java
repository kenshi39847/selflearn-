package to.msn.wings.selflearn.chap07.method;

public class Method {

	public static void main(String[] args) {
		/*
		var p = new Person();
		p.name = "山田太郎";
		p.age = 30;
		System.out.println(p.show());
		*/

	}

}

/*
クラスの動作/処理、ふるまいを表すための要素を「メソッド」という。
主に、クラスで管理されているデータ（フィールド）の値を操作するための役割を担う。
これまでのコードではmainメソッドの配下で記述していたが、これはアプリのエントリーポイントとなる特殊なメソッドで、
アプリを起動する際に自動的に呼び出されていた。
これに対して、一般的なメソッドは、他のメソッドから呼び出されることで実行される。

メソッドの定義
[修飾子] 戻り値の型 メソッド名([引数の型 引数,...]) [throws句] {
  ...メソッドの本体...
}
*/

/*
メソッド名は識別子の命名ルールに従うのはこれまでと同じである。
加えて、構文規則ではないが、メソッドとしての役割を把握できるような命名を意識する。
具体的にはaddElementのように「動詞 + 名詞」の形式で命名することをおすすめする。
例）メソッド名でよく利用する動詞
add,get,insert,begin,end,start,stop,remove,delete,set,open,close
*/

/*
メソッドの中で参照可能な変数のことを「引数」という。メソッドを呼び出す際に、呼び出し側からメソッドに値を引き渡すために利用する。
呼び出し元から渡される値のことを「実引数」、受け取り側の変数のことを「仮引数」と区別して呼ぶ場合もある。

○引数の並び順
(1)重要なものから順番に
メソッドの挙動に深く関わるものを先に記述する。

(2)順序に一貫性を持たせる
クラス内部はもちろん、アプリ（ライブラリ）として引数の並び順には一貫性があるべきである。
例えば、メソッドではwidth→heightの順序であるのに、別のメソッドではheight→widthであるのは混乱の元である。

(3)関連する引数は近接させる
例えば、widthとheight、xとyのように意味的に関節する引数は隣接させる。
*/

/*
引数がメソッドの入口であるとするならば、「戻り値（返り値）」はメソッドの出口で、メソッドが処理した結果を表す。
戻り値は「return命令」によって表す。

return命令
return 戻り値

一般的には、return命令はメソッドの末尾、もしくはメソッドの途中で呼び出す場合にはif/switchなどの条件分岐構文とセットで利用する。
戻り値がないメソッドでは、return命令は省略してもよい。その場合、メソッド定義の戻り値の型には、特別な型としてvoidを指定する。
*/

/*
メソッドでは、以下のような修飾子を指定できる。
public,protected,private,static,abstract,final,synchronized,strictfp,native

アクセス修飾子を省略した場合には、フィールドと同じくパッケージプライベートの扱いとなる。
*/

/*
「this」はメソッドなどの配下で暗黙的に（=宣言せずに）利用できる特別な変数で、現在のオブジェクトを表す。
例）
public class Person {
	public String name;
	public int age;
	
	public void show() {
		System.out.printf("%s（%d歳）です。\n", this.name, this.age);
	}
}
*/
