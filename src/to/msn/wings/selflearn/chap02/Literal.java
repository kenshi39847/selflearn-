package to.msn.wings.selflearn.chap02;

public class Literal {

	public static void main(String[] args) {

	}

}

/*
  データ型に格納できる値そのもの、また、値の表現方法のことを「リテラル」という。
  リテラルには「整数リテラル」、「浮動小数点数リテラル」、「真偽リテラル」、「文字/文字列リテラル」などがある。
*/

/*
  整数リテラル
  1.10進数リテラル・・・-13,108,0
  2.16進数リテラル・・・0xff,0xA3C1
  3.8進数リテラル・・・ 0666,0124
  4.2進数リテラル・・・ 0b1101,0b100
*/

/*
  浮動小数点数リテラル
  一般的には「1.41421356」となるが、「指数表現」で表すこともできる。
  指数表現は「仮数部 E 符号 指数部」の形式で表す。
*/

/*
  数値リテラルでは特に指定がない場合、整数はint、浮動小数点数はdoubleと見なされる。
  データ型が勝手に決められると困る場合には、数値リテラルに型を表す接尾辞（「サフィックス」）を付与する。
  System.out.println(2147483648)  ←コンパイルエラー
  System.out.println(2147483648L) ←正しく動作する
*/

/*
  データ型|サフィックス|例
  long    |l,L         |100L
  float   |f,F         |3.5F
  double  |d.D         |3D
*/

/*
  桁数の大きな数値の可能性を改善するために、数値リテラルの中に「_」を記述することを「数値セパレーター」という。
  var value = 1_234_567;
*/

/*
  文字リテラルは「'」でくくって表す。下記のコードは意味的には等価である。
  System.out.println('あ');
  System.out.println('\u3042'); 
*/

/*
  「\~」は「エスケープシーケンス」と呼ばれ、主にタブ/改行など特別な意味を持つ（=ディスプレイに表示できないなど）文字を表記するために利用する。
  エスケープシーケンス|概要
  \t                  |タブ文字
  \b                  |バックスペース（1文字削除）
  \n                  |改行（ラインフィード）
  \r                  |復帰（キャリッジリターン）
  \f                  |フォームフィード（改ページ）
  \'                  |シングルクォート
  \"                  |ダブルクォート
  \\                  |バックスラッシュ
  \xxx                |8進数の文字
  \u3042              |Unicode文字
*/

/*
  文字列リテラルは「"」でくくって表す。
  System.out.println("You are \"GREAT\" teachaer!!"); 
*/
