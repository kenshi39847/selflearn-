package to.msn.wings.selflearn.chap02;

public class ReferenceType {

	public static void main(String[] args) {
		var list = new int[][] {
			{ 1, 2 },
			{ 3, 4, 5, 6 },
			{ 7, 8, 9 },
		};
		System.out.println(list[1][2]);

	}

}

/*
  Javaの参照型には「クラス型」、「インターフェース型」、「配列型」がある。
*/

/*
  すべての文字列を普遍的に表現/操作できるようなひな形を「クラス」という。
  また、クラスで用意されたデータの入れ物を「フィールド」、データ操作するための道具を「メソッド」という。
  フィールドとメソッドを総称して「メンバー」という。
  オブジェクト指向プログラミングの世界では、あらかじめ用意されたひな形（クラス）から、
  具体的なデータ（値）を備えたオブジェクトを作成し、操作そのものはオブジェクト経由で行うのが基本である。
*/

/*
  クラスをもとに、具体的なモノを作成する作業のことを「インスタンス化」といい、
  インスタンス化によってできるモノのことを「オブジェクト（またはインスタンス）」という。
*/

/*
  クラスをインスタンス化
  クラス名 変数名 = new クラス名(引数, ...)
  File f = new File("c:\\data\\sample.dat");
*/

/*
  フィールド/メソッドの呼び出し
  オブジェクト.フィールド [= 値]
  オブジェクト.メソッド(引数, ...)
  下記はFileオブジェクトfからファイルの名前を取り出すには、getNameメソッドを呼び出す。
  var name = f.getName();
*/

/*
  フィールド/メソッドによってはオブジェクトを生成せずに、クラスから直接呼び出せるものがあり、
  これを「クラスフィールド/クラスメソッド（静的フィールド/静的メソッド）」という。
*/

/*
  クラスフィールド/クラスメソッドの呼び出し
  クラス.フィールド名 [= 値]
  クラス.メソッド(引数, ...)
*/

/*
  クラスフィールド/クラスメソッドに対してオブジェクト（インスタンス）を生成して呼び出すフィールド/メソッドのことを
  「インスタンスフィールド/インスタンスメソッド」という。
*/

/*
  配列の宣言（サイズ指定）
  データ型[] 配列名 = new データ型[要素数]
  int[] list = new int[5];
  配列の宣言（初期値あり）
  データ型[] 配列名 = {要素1, 要素2, ...}
  int[] list = { 1, 2, 3, 4, 5 };
  配列の宣言（varによる配列宣言）
  var list = new int[5];
  var list = new int[] { 1, 2, 3, 4, 5 };
*/

/*
  配列のアクセス
  配列名[インデックス番号
  System.out.println(list[0]); //結果:1
  System.out.println(list.length); //結果:5
*/

/*
  インデックスが1つの配列を1次元配列、インデックスが複数の配列を多次元配列という。
*/

/*
  多次元配列の宣言（サイズ指定）
  データ型[][] 配列名 = new データ型[要素数1][要素数2]
  int[][] list = new int[3][5];
*/

/*
  多次元配列の宣言（初期値を指定）
  データ型[][] 配列名 = {
    { 値, 値, ... },
    { 値, 値, ... },
    ...
  }
  int[][] list = {
    { 1, 2, 3 },
    { 4, 5, 6 },
    { 7, 8, 9 },
  };
*/

/*
  多次元配列の宣言（長さが異なる例）
  データ型[][] 変数名 = new データ型[要素数][]
  変数名[インデックス] = new データ型[要素数]
  var list = new int[3][];
  list[0] = new int[2];
  list[1] = new int[4];
  list[2] = new int[3];
*/
