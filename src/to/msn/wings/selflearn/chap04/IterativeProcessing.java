package to.msn.wings.selflearn.chap04;

public class IterativeProcessing {

	public static void main(String[] args) {
		/*
		var i = 1;
	    while (i < 6) {
	      System.out.println(i + "番目のループです。");
	      i++;
	    }
	    */
		/*結果：1番目のループです。
	            2番目のループです。
	            3番目のループです。
	            4番目のループです。
	            5番目のループです。
	    */
		
		/*
		var i = 1;
	    do {
	      System.out.println(i + "番目のループです。");
	      i++;
	    } while (i < 6);
	    */
		/*結果：1番目のループです。
	            2番目のループです。
	            3番目のループです。
	            4番目のループです。
	            5番目のループです。
	    */

	}

}

/*
  while命令
  while(条件式) {
    ...条件式がtrueである間、繰り返し実行する処理...
  }
*/

/*
  do...while命令
  do {
    ...条件式がtrueである間、繰り返し実行する処理...
  } while(条件式);
*/

/*
  終了条件がtrueにならないループのことを「無限ループ」という。
  無限ループは、コンピュータへの極端な不可の原因にもなり、フリーズの原因にもなる。
  繰り返し処理ではループが正しく終了するかきちんと確認する。
*/

/*
for命令
for(初期化式; 継続条件式, 増減式) {
  ...ループ内で実行する処理...
}
for (var i = 1; i < 6; i++) {
  System.out.println(i + "番目のループです");
}
*/

/*
for命令の3つの式
1.初期化式・・・forブロックに入った最初のループで1度だけ実行される。この変数をカウンター変数という。
2.継続条件式・・・forループを継続するための条件を表す。
3.増減式・・・ループ内の処理が一回終わる度に実行される。
*/

/*
for命令利用時の注意点
1.無限ループはfor命令でも発生する。
2.カウンター変数に浮動小数点型を利用しない。
3.ブロック配下でカウンター変数を操作しない。
*/

/*
ループ全般での注意点
1.ループ内のオブジェクト作成は最大限避けるようにする。
2.ループ内の例外処理が発生したときに要否を吟味する。
*/

/*
「順次演算子（カンマ演算子）」を利用することで、for命令の3式に複数の式を列挙することができる。
for (var i = 1; i < 6; System.out.println(i + "番目のループです"), i++);
*/

